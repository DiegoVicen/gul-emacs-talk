#+Title:  The first hour of your next ten years: An Emacs introduction
#+Author: Diego Vicente Mart√≠n
#+Email:  mail@diego.codes
#+Date:   2017-11-21

* Introduction

About me:
- Computer Science Graduate, M.Sc. @ UC3M
- Almost data scientist.
- Emacs user for around two years.

- GitHub   :: [[https://github.com/DiegoVicen][DiegoVicen]]
- Twitter  :: [[https://twitter.com/DiegoVicen][@DiegoVicen]]
- Telegram :: [[https://telegram.me/DiegoVicente][@DiegoVicente]]
- If everything else fails, [[mailto:mail@diego.codes][send me an email]]

** About this talk

1) Some brief context
2) Getting started with Emacs
3) Don't fear Emacs-Lisp
4) Packages worth checking out
5) Ask me something if I messed up

** The most important Emacs insight

- Emacs has _terrible_ defaults.
- It is super powerful once you configure it.

- Emacs is really old. (that's good)
- There are packages for (almost) everything.

- Is free, like in beer and freedom!

** Wait, that was not the deal!

- "But Diego, I don't want to configure anything, I just want an editor!"

- I have good news for you!
- I can show you the best text editor ever.
- Zero configuration needed.

- "What is it?!"

** ... It's vim!

- Yup. For real.
  - It's everywhere*.
  - It's comfortable.
  - Zero configuration needed.

- You can exit with =:q=, =:quit=, =:wq=, =:q!=, =:exit=, =:x=, =ZZ= and =ZQ=.
  Stop being a baby.

** Where's the trick?

- Probably, you want to do more things apart from editing text.
- Vim is pure UNIX philosophy: it can only edit text^{(but it's super good)}
- Configure, rebind keys, install plugins... You need vimscript.

#+BEGIN_SRC
filetype plugin indent on
  augroup Misc " {{{2
    autocmd!
    autocmd FileType netrw call s:scratch_maps()
    " [...]
    autocmd BufWritePre,FileWritePre /etc/* if &ft == "dns" |
          \ exe "normal msHmt" |
          \ exe "gl/^\\s*\\d\\+\\s*;\\s*Serial$/normal ^\<C-A>" |
          \ exe "normal g`tztg`s" |
          \ endif
    autocmd CursorHold,BufWritePost,BufReadPost,BufLeave *
      \ if !$VIMSWAP && isdirectory(expand("<amatch>:h")) |
      let &swapfile = &modified | endif
  augroup END " }}}2
#+END_SRC

** If you want your own editor, welcome to Emacs

- Run this. If the result is larger than 20, install Emacs.

#+BEGIN_SRC bash :dir ~/
wc -l .vimrc
#+END_SRC

- You will be faster if your tools apply to your whole workflow.
- Starting is slow, it eventually pays off.

- In any case, learn vim. You can thank me later.


* Getting started with Emacs

- Install it from your package manager of choice:

| System  | Build                                        |
|---------+----------------------------------------------|
| Ubuntu  | =emacs-snapshot= from =ppa:ubuntu-elisp/ppa= |
| Arch    | =$ pacman -S emacs=                          |
| macOS   | =brew cask install emacs=                    |
| Windows | [[https://ftp.gnu.org/gnu/emacs/windows/][May the gods help you]]                        |

** Booting up!

- Use the GUI version for proper support and eye-candy.
  - Some terminal emulators will capture your modifiers.
  - Don't worry, you'll keep your beloved terminal! -- more later.

- Welcome to Emacs!

** Emacs notation

- =C-f=     :: Press at the same time ctrl and f (ctrl+f)
- =M-d=     :: Press alt+d (probably)
- =C-M-s=   :: Press ctrl+alt+s
- =C-x C-c= :: Press ctrl+x and then press ctrl+c
- =C-x g=   :: Press ctrl+x and then only press g
- =C-c p P= :: Press ctrl+x, then p, and finally shift+p

** First level is always a tutorial

- You can enter the tutorial clicking on the link on the splash screen.
- Another way to enter the tutorial is =C-h t=

- You will learn by practice movement, edition, and basic concepts of Emacs.
- You should do this. Actually, several times.

- When using the editor at first, put effort on practising new skills.

** Muscle memory is the key

- Start using Emacs for small tasks.
- *Learn by conscious practice!*

- Incremental learning usually helps.

- If you don't get used to something, don't worry too much.

** Introducing you to your best friends

- =C-h= prefix is used for help
- =C-h f= :: define a function
- =C-h v= :: define a variable
- =C-h m= :: define the current modes

- =C-h k= :: which function is bind to a keystroke
- =C-h w= :: where a function is bind

- For everything else, =C-h a=.

** Emacs is the self-documenting editor

- Everything is extremely well documented.
- Only your own Emacs can help you understand your own Emacs.
- Third party packages are included in this documentation as well.
- Use them every single time before googling stuff.

** Things I recommend you do:

- [[https://www.emacswiki.org/emacs/MovingTheCtrlKey][Rebind Caps-lock to Ctrl]]
- [[https://stackoverflow.com/questions/6344389/osx-emacs-unbind-just-the-right-alt][Unbind right alt key]]
- [[https://github.com/DiegoVicen/my-emacs#basic-emacs-setup][Take a look at the basic things in my configuration]]

- Use the GUI for full power!
- You can use your terminal inside Emacs.

** Things people recommend but I don't:

- [[https://www.emacswiki.org/emacs/Evil][Use evil-mode]] to get vim inside Emacs.
- [[https://www.emacswiki.org/emacs/EmacsAsDaemon#toc17][Run Emacs as a daemon.]]
- Install a pre-configured distribution.
- Use =customize=.


* Don't fear Emacs-Lisp!

- This is not an elisp introduction.
- I will show you what you need to configure things.

- Let's get this straight: Lisp is easy.
  - =f(x, y, z)= is written as =(f x y z)=
  - Now you can read Lisp!

** A quick insight beforehand

- Emacs is not a text editor: Emacs *is a REPL*

- Executing elisp code can change the state of the editor.
- This is the way to customize Emacs.

- =M-:= lets you evaluate elisp code

** Starting your own configuration

- Your configuration is an elisp file
- It contains the code to be executed when starting Emacs.

- All the code in there can be executed after starting and will also change the
  state of the editor!

** Where the code lives

- You can host your configuration in two different places:
  1. =~/.emacs=
  2. =~/.emacs.d/init.el=

- I recommend the latter (tidier for VCS)

** Some basic concepts

- There are some important configuration concepts you need to understand.
- Understanding these should be enough to configure most packages.

*** Setting a variable

- All variables are global
- Variables are used as switches some times
- You can set a variable global, local or to a default value.

#+BEGIN_SRC emacs-lisp
(setq compilation-scroll-output t)
(setq-local compilation-scroll-output t)
(setq-default compilation-scroll-output t)
#+END_SRC

*** What can a variable be set to?

- Basically everything, there is no type system.
- You can even set variables to functions by quoting them

#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t
      initial-scratch-message nil
      initial-major-mode 'org-mode)
#+END_SRC

*** Quoting lists and functions

- Quoting makes a function not evaluated.

#+BEGIN_SRC emacs-lisp
(foo bar baz)  ;; => means apply function foo with bar and baz as parameters
'(foo bar baz) ;; => is just a list of 3 values: foo, bar and baz
#+END_SRC

*** Hook, line and sinker

- You can use hooks to automatically execute something when an event happens
- Almost all major modes and important events have a hook.

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'git-gutter-mode)
;; enable git-gutter-mode every time a programming mode is activated.
#+END_SRC

*** Binding keys

- You can bind or rebind everything into everything.
- Use key-maps to make mode-dependant bindings.
- The =C-c <single-key>= is reserved for user bindings.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c t") 'shell)
#+END_SRC

** What can I configure?

- Virtually everything:
  - All keys are functions that can be modified
  - You can build on top of other functions
  - Graphical stuff, including other tools...

- Don't reinvent the wheel! You can also install packages.

** Including MELPA

- Emacs comes with a package manager.
- MELPA is much more complete than the regular repository.

#+BEGIN_SRC emacs-lisp
(when (>= emacs-major-version 24)
  (require 'package)
  (add-to-list
   'package-archives
   '("MELPA" . "https://melpa.org/packages/") t)
  (package-initialize))
#+END_SRC

** Now you can install packages!

- Use =M-x list-packages= to see the packages available.
- Use =M-x install-package= to install a package by name.

- Include =(require <package>)= to force Emacs loading the package's functions.
- After getting some grip on it, I recommend checking =use-package= for
  building your configuration.


* Some packages worth checking out

- Packages will be the foundation of your configuration.
- Packages can coexist without clashing (most likely).
- This is when Emacs starts being fun.

** For programming

- Almost every language has dedicated packages for it:
  - Usually, a major mode and complementary minor modes.
  - A quick search in MELPA or Google probably gives you ideas.
  - /All/ languages have great support and easy setup (except Java).

- Check other people's configuration for a language you want to use to get ideas.
- You can start [[https://github.com/DiegoVicen/my-emacs#programming-modes][by checking if I did something on your language]].

** An absolute must: Magit

- [[https://magit.vc/][Magit]] is a git porcelain for Emacs.
- You can execute almost all kinds of git commands with a few keystrokes.
- It is just a reason by itself to use Emacs.

** Organizing your life in projects: Projectile

- Uses the concept of project:
  - A project is something with a configuration file or a VCS

- Lets you compile, run, test, search, etc per project

- Combine it with =persp= to get window distribution per project

** Connecting to a remote server: TRAMP

- TRAMP is black magic included in Emacs by default
  1. Run =find-file= (=C-x C-f=) and erase the current directory
  2. Write =ssh:<user>@<server>= to connect to a remote server

- You keep all your configuration and tools when using TRAMP

- You can even bookmark remote files to access them later

** Using the terminal inside Emacs

- There two main alternatives:
  1) =shell=: A terminal emulator inside Emacs
	 * It uses your =zshrc= / =bashrc= / =fishrc=
	 * For that reason, it may break if your configuration is too complex
  2) =eshell=: A terminal emulator written in elisp
	 * It has its own configuration and implementation of some commands
	 * It is a buffer
	 * Inadequate for certain tasks

- =shell= should suffice everything you do in your current setup.

** Other tools for programming

- =smartparens= :: automatically close parenthesis/braces/quotes
- =auto-complete/company= :: code auto-completion back-ends
- =flycheck= :: code linting

- Now Emacs is a small, Swiss knife IDE!


#  LocalWords:  UC vimscript ctrl elisp REPL VCS MELPA Magit
